// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String
  imageUrl String
  products Product[]
  Course   Course[]
}

model Course {
  id              String   @id @default(uuid())
  name            String
  slug            String
  description     String
  price           Float
  image           String
  data_lancamento DateTime @default(now())
  online          Boolean
  video_url       String?
  acesso_free     Boolean
  status          Boolean
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  module          Module[]
  order           Order[]

  @@index([categoryId], name: "ct_")
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  slug               String
  description        String
  basePrice          Decimal  @db.Decimal(10, 2)
  imageUrl           String
  categoryId         String
  category           Category @relation(fields: [categoryId], references: [id])
  codeBar            String?  
  status             Boolean
  stockQuantity      Int      @default(0)
  diccountPercentage Int      @default(0)
  orders             Order[]
  insertions         ProductStoke[]

  @@index([categoryId], name: "ct_")
}

model ProductStoke {
  id            String   @id @default(uuid())
  productId     String
  action        Stoke
  DateRegister  DateTime @default(now()) 
  insertedBy    String   
  description  String
  product       Product  @relation(fields: [productId], references: [id])
}
model Order {
  id          String        @id @default(uuid())
  date        DateTime      @default(now())
  status      String
  products    Product[]
  courses     Course[]
  negociacoes Negotiation[]
}

model Negotiation {
  id          String   @id @default(uuid())
  amount      Float
  dataPayment DateTime
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
}

model Module {
  id       String    @id @default(uuid())
  title    String
  slug     String
  courseId String
  course   Course    @relation(fields: [courseId], references: [id])
  contents Content[]

  @@index([courseId], name: "cs_")
}

model Content {
  id       String @id @default(uuid())
  title    String
  slug     String
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])
  videoUrl String
  archived Json

  @@index([moduleId], name: "md_")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?  @relation(fields: [profileId], references: [id])
  profileId     String?
}

model Profile {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Stoke {
  INCLUDE
  EXCLUDE
}
